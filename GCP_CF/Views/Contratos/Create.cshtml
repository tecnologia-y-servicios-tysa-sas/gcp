@model GCP_CF.Models.Contratos

@{
    ViewBag.Title = "Crear Contrato";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Crear Contrato</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal text-left">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-4">
                <div> @Html.LabelFor(model => model.ContratoMarco_Id, "Contrato Marco", htmlAttributes: new { @class = "control-label" })</div>
                @Html.DropDownList("Contrato_Id", null, "Seleccione Contrato Marco", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ContratoMarco_Id, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-8">
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.NumeroContrato, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.NumeroContrato, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NumeroContrato, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <div> @Html.LabelFor(model => model.Persona_Id, htmlAttributes: new { @class = "control-label" })</div>
                @Html.DropDownList("PersonaCliente_Id", null, "Seleccione Entidad", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Persona_Id, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">


                <div>@Html.LabelFor(model => model.ObjetoContractual, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.ObjetoContractual, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ObjetoContractual, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.FechaInicio, htmlAttributes: new { @class = "control-label" })
                <div class='input-group date text-center' id='datetimeFechaInicio' style="width:280px">
                    @Html.EditorFor(model => model.FechaInicio, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @style = "text-aling:center", @id = "fechaInicial" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar">
                        </span>
                    </span>
                </div>
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.FechaTerminacion, htmlAttributes: new { @class = "control-label" })
                <div class='input-group date text-center' id='datetimeFechaTerminacion' style="width:280px">
                    @Html.EditorFor(model => model.FechaTerminacion, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @style = "text-aling:center", @id = "fechaFinal" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar">
                        </span>
                    </span>
                </div>
            </div>
            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.Plazo, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.Plazo, new { htmlAttributes = new { @class = "form-control", @id = "plazo", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Plazo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            <div class="col-md-4">
                <div> @Html.LabelFor(model => model.TipoContrato_Id, "Tipo Contrato", htmlAttributes: new { @class = "control-label" })</div>
                @Html.DropDownList("TipoContrato_Id", null, "Seleccione Tipo Contrato", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TipoContrato_Id, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <div> @Html.LabelFor(model => model.Persona_Id, "Supervisor", htmlAttributes: new { @class = "control-label" })</div>
                @Html.DropDownList("PersonaSupervisor_Id", null, "Seleccione Supervisor", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Persona_Id, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                    @Html.LabelFor(model => model.FechaActaInicio, htmlAttributes: new { @class = "control-label" })
                    <div class='input-group date text-center' id='datetimeFechaActaInicio' style="width:280px">
                        @Html.EditorFor(model => model.FechaActaInicio, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @style = "text-aling:center" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.Crp, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.Crp, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Crp, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                    @Html.LabelFor(model => model.FechaCrp, htmlAttributes: new { @class = "control-label" })
                    <div class='input-group date text-center' id='datetimeFechaCrp' style="width:280px">
                        @Html.EditorFor(model => model.FechaCrp, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @style = "text-aling:center" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
            </div>
            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.Cdp, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.Cdp, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cdp, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.FechaCdp, htmlAttributes: new { @class = "control-label" })
                <div class='input-group date text-center' id='datetimeFechaCdp' style="width:280px">
                    @Html.EditorFor(model => model.FechaCdp, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @style = "text-aling:center" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar">
                        </span>
                    </span>
                </div>
            </div>
            <div class="col-md-4">
                <div> @Html.LabelFor(model => model.TipoEstadoContrato_Id, "Estado Contrato", htmlAttributes: new { @class = "control-label" })</div>
                @Html.DropDownList("TiposEstadoContrato_Id", null, "Seleccione Estado Contrato", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TipoEstadoContrato_Id, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.ValorContrato, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.ValorContrato, new { htmlAttributes = new { @class = "form-control", @id = "valorContrato" } })
                @Html.ValidationMessageFor(model => model.ValorContrato, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.ValorAdministrar, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.ValorAdministrar, new { htmlAttributes = new { @class = "form-control", @id = "valorAdministrar" } })
                @Html.ValidationMessageFor(model => model.ValorAdministrar, "", new { @class = "text-danger" })
                @*<div>@Html.LabelFor(model => model.Ejecucion, htmlAttributes: new { @class = "control-label" })</div>
        @Html.EditorFor(model => model.Ejecucion, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Ejecucion, "", new { @class = "text-danger" })*@
            </div>

            <div class="col-md-4">
                <div>@Html.LabelFor(model => model.Honorarios, htmlAttributes: new { @class = "control-label" })</div>
                @Html.EditorFor(model => model.Honorarios, new { htmlAttributes = new { @class = "form-control", @id = "honorarios" } })
                @Html.ValidationMessageFor(model => model.Honorarios, "", new { @class = "text-danger" })
                @*<div>@Html.LabelFor(model => model.PorcentajeFacturado, htmlAttributes: new { @class = "control-label" })</div>
        @Html.EditorFor(model => model.PorcentajeFacturado, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.PorcentajeFacturado, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <div> @Html.LabelFor(model => model.Persona_Id, "Abogado", htmlAttributes: new { @class = "control-label" })</div>
                @Html.DropDownList("PersonaAbogado_Id", null, "Seleccione Abogado", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Persona_Id, "", new { @class = "text-danger" })
                @*<div>@Html.LabelFor(model => model.PorcentajeFacturadoHonorarios, htmlAttributes: new { @class = "control-label" })</div>
        @Html.EditorFor(model => model.PorcentajeFacturadoHonorarios, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.PorcentajeFacturadoHonorarios, "", new { @class = "text-danger" })*@
            </div>
            <div class="col-md-4">
                <div> @Html.LabelFor(model => model.Persona_Id, "Supervisor", htmlAttributes: new { @class = "control-label" })</div>
                @Html.DropDownList("PersonaSupervisorTecnico_Id", null, "Seleccione Supervisor Técnico", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Persona_Id, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">

            </div>
        </div>

        <div class="form-group text-center">
            <div class="col-md-12">
                <input type="submit" value="Crear Contrato" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="text-center">
    @Html.ActionLink("Regresar a la Lista", "Index")
</div>

@*<script src="//code.jquery.com/jquery-1.12.0.min.js"></script>*@
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(function () {
            $.validator.methods.date = function (value, element) {
                return this.optional(element) || moment(value, true).isValid();
            }
            var fechaActual = new Date();
            fechaActual.setHours(23, 59, 59, 0);

            $('#datetimeFechaInicio').datetimepicker({
                locale: 'es',
                format: 'DD/MM/YYYY',
                minDate: fechaActual,
                useCurrent: false
            });

            $('#datetimeFechaTerminacion').datetimepicker({
                locale: 'es',
                format: 'DD/MM/YYYY',
                minDate: fechaActual,
                useCurrent: false
            });

            $('#datetimeFechaActaInicio').datetimepicker({
                locale: 'es',
                format: 'DD/MM/YYYY',
                minDate: fechaActual,
                useCurrent: false
            });

            $('#datetimePlazo').datetimepicker({
                locale: 'es',
                format: 'DD/MM/YYYY',
                minDate: fechaActual,
                useCurrent: false
            });

            $('#FechaCrp').datetimepicker({
                locale: 'es',
                format: 'DD/MM/YYYY',
                minDate: fechaActual,
                useCurrent: false
            });

            $('#FechaCdp').datetimepicker({
                locale: 'es',
                format: 'DD/MM/YYYY',
                minDate: fechaActual,
                useCurrent: false
            });


            $("#fechaFinal").blur(function () {
                var start = moment(stringToDate($("#fechaInicial").val(), "dd/MM/yyyy", "/"));
                var end = moment(stringToDate($("#fechaFinal").val(), "dd/MM/yyyy", "/"));
                $("#plazo").val(end.diff(start, "days"));
            });

            function stringToDate(_date, _format, _delimiter) {
                var formatLowerCase = _format.toLowerCase();
                var formatItems = formatLowerCase.split(_delimiter);
                var dateItems = _date.split(_delimiter);
                var monthIndex = formatItems.indexOf("mm");
                var dayIndex = formatItems.indexOf("dd");
                var yearIndex = formatItems.indexOf("yyyy");
                var month = parseInt(dateItems[monthIndex]);
                month -= 1;
                var formatedDate = new Date(dateItems[yearIndex], month, dateItems[dayIndex]);
                return formatedDate;
            }



        });
        $("#valorContrato").blur(function () {
            $("#valorContrato").val(parseFloat($('#valorContrato').val(), 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString());
        });
        $("#valorAdministrar").blur(function () {
            $("#valorAdministrar").val(parseFloat($('#valorAdministrar').val(), 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString());
        });
        $("#honorarios").blur(function () {
            $("#honorarios").val(parseFloat($('#honorarios').val(), 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString());
        });
    </script>

}
